# üìå Nome do workflow
name: Deploy to GitHub Pages

# ‚è∞ Gatilhos para execu√ß√£o do workflow
on:
  # Executa quando houver push na branch main
  push:
    branches: [ "main" ]
  # Permite execu√ß√£o manual na interface do GitHub
  workflow_dispatch:
  # Agenda execu√ß√£o di√°ria √†s 8h (hor√°rio de Fortaleza/UTC-3)
  schedule:
    - cron: '0 11 * * *'

# üîê Permiss√µes necess√°rias
permissions:
  contents: write  # Permite escrever no reposit√≥rio
  pages: write     # Permite publicar no GitHub Pages
  id-token: write  # Permite autentica√ß√£o OIDC

# üèóÔ∏è Configura√ß√£o do ambiente de publica√ß√£o
# OBRIGAT√ìRIO para o GitHub Pages (corre√ß√£o do erro)
env:
  name: github-pages  # Nome do ambiente de deploy

# üíº Jobs (tarefas) do workflow
jobs:
  build-and-deploy:
    # üåç Configura√ß√£o do ambiente de execu√ß√£o
    runs-on: ubuntu-latest  # Usa a √∫ltima vers√£o do Ubuntu
    
    # üìå Define o ambiente de deploy (CORRE√á√ÉO PRINCIPAL)
    environment:
      name: github-pages  # Nome do ambiente
      url: ${{ steps.deployment.outputs.page_url }}  # URL que ser√° gerada
    
    # üöÄ Passos de execu√ß√£o
    steps:
      # 1Ô∏è‚É£ Passo: Baixar o c√≥digo do reposit√≥rio
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Baixa todo o hist√≥rico do git

      # 2Ô∏è‚É£ Passo: Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Vers√£o do Python
          check-latest: true     # Usa a √∫ltima vers√£o patch dispon√≠vel

      # 3Ô∏è‚É£ Passo: Instalar depend√™ncias Python
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip  # Atualiza o pip
          pip install requests beautifulsoup4  # Instala bibliotecas necess√°rias
          # Cria requirements.txt m√≠nimo para cache futuro
          echo "requests==2.31.0" > requirements.txt
          echo "beautifulsoup4==4.12.2" >> requirements.txt

      # 4Ô∏è‚É£ Passo: Executar script de download de arquivos
      - name: Run downloads_files.py
        run: |
          python downloads_files.py  # Executa o script Python
          cat downloaded_files.txt  # Exibe o conte√∫do do arquivo gerado

      # 5Ô∏è‚É£ Passo: Configurar Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Vers√£o do Node.js
          cache: 'npm'        # Habilita cache do npm

      # 6Ô∏è‚É£ Passo: Gerar metadados com JavaScript
      - name: Generate metadata
        run: |
          node generate_metadata.js  # Executa o script Node
          cat files_metadata.json    # Exibe o conte√∫do do arquivo gerado

      # 7Ô∏è‚É£ Passo: Instalar depend√™ncias do Playwright (se necess√°rio)
      - name: Install Playwright dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgbm-dev  # Depend√™ncia gr√°fica

      # 8Ô∏è‚É£ Passo: Configurar GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # 9Ô∏è‚É£ Passo: Enviar artefato para deploy
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .  # Envia todo o diret√≥rio atual
          # Exclui arquivos desnecess√°rios para o deploy
          exclude-assets: |
            generate_metadata.js
            downloads_files.py
            requirements.txt
            .github/workflows/*

      # üîü Passo: Fazer o deploy no GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment  # ID para refer√™ncia posterior
        uses: actions/deploy-pages@v4
